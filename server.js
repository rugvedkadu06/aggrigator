// data_aggregator.js

import express from "express";
import cors from "cors";
import mongoose from "mongoose";
import { config } from "dotenv";

config(); // Load environment variables from .env

const app = express();
const PORT = process.env.PORT || 5002;

// --- MIDDLEWARE ---
app.use(cors());
app.use(express.json());

// --- DATABASE (MONGODB) ---
mongoose.connect(process.env.MONGO_URI, { dbName: 'janvaani_db' }) 
Â  .then(() => console.log("âœ… MongoDB Aggregator Connected"))
Â  .catch((err) => console.error("MongoDB Connection Error:", err));

// --- SCHEMAS ---
const DetectionSubSchema = new mongoose.Schema({
Â  Â  annotatedImageUrl: String,
Â  Â  detections: Array,
Â  Â  detectedAt: Date,
}, { _id: false });

const IssueSchema = new mongoose.Schema({
Â  Â  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
Â  Â  title: String,
Â  Â  description: String,
Â  Â  location: String,
Â  Â  imageUrl: String,
Â  Â  submittedBy: String,
Â  Â  redFlags: Number,
Â  Â  greenFlags: Number,
Â  Â  status: String,
Â  Â  detection: DetectionSubSchema,
}, { timestamps: true });

const FlagSchema = new mongoose.Schema({
Â  Â  issueId: { type: mongoose.Schema.Types.ObjectId, ref: 'Issue' },
Â  Â  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
Â  Â  userName: String,
Â  Â  type: String,
Â  Â  reason: String,
}, { timestamps: true });

const UserSchema = new mongoose.Schema({
Â  Â  name: String,
Â  Â  email: String,
Â  Â  phone: String,
Â  Â  points: Number,
Â  Â  faceImageUrl: String,
});

// --- MODELS ---
const User = mongoose.model("User", UserSchema);
const Issue = mongoose.model("Issue", IssueSchema);
const Flag = mongoose.model("Flag", FlagSchema);


// --- REUSABLE AGGREGATION FUNCTION ---
async function fetchAndAggregateData() {
    console.log(`\n--- STARTING DATA AGGREGATION at ${new Date().toLocaleTimeString()} ---`);
Â  Â  // 1. Fetch all Users
Â  Â  const users = await User.find({}).select('-otp -otpExpiry -verified -__v').lean();

Â  Â  // 2. Fetch all Flags
Â  Â  const flags = await Flag.find({}).select('-__v').lean();

Â  Â  // 3. Fetch all Issues and embed related data (Flags and User Info)
Â  Â  const issuesWithDetails = await Issue.aggregate([
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  $lookup: {
Â  Â  Â  Â  Â  Â  Â  Â  from: 'users',
Â  Â  Â  Â  Â  Â  Â  Â  localField: 'userId',
Â  Â  Â  Â  Â  Â  Â  Â  foreignField: '_id',
Â  Â  Â  Â  Â  Â  Â  Â  as: 'submittedByUser'
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  { $unwind: { path: '$submittedByUser', preserveNullAndEmptyArrays: true } },
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  $lookup: {
Â  Â  Â  Â  Â  Â  Â  Â  from: 'flags',
Â  Â  Â  Â  Â  Â  Â  Â  localField: '_id',
Â  Â  Â  Â  Â  Â  Â  Â  foreignField: 'issueId',
Â  Â  Â  Â  Â  Â  Â  Â  as: 'issueFlags'
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  $project: {
Â  Â  Â  Â  Â  Â  Â  Â  _id: 1, title: 1, description: 1, location: 1,
Â  Â  Â  Â  Â  Â  Â  Â  status: 1, redFlags: 1, greenFlags: 1, createdAt: 1,
Â  Â  Â  Â  Â  Â  Â  Â  originalImageUrl: '$imageUrl',
Â  Â  Â  Â  Â  Â  Â  Â  imageUrl: { $ifNull: ['$detection.annotatedImageUrl', '$imageUrl'] },
Â  Â  Â  Â  Â  Â  Â  Â  annotatedImageUrl: '$detection.annotatedImageUrl',
Â  Â  Â  Â  Â  Â  Â  Â  detections: '$detection.detections',
Â  Â  Â  Â  Â  Â  Â  Â  detectedAt: '$detection.detectedAt',
Â  Â  Â  Â  Â  Â  Â  Â  submittedBy: '$submittedByUser.name',
Â  Â  Â  Â  Â  Â  Â  Â  submittedByEmail: '$submittedByUser.email',
Â  Â  Â  Â  Â  Â  Â  Â  flags: '$issueFlags',
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  { $sort: { createdAt: -1 } }
Â  Â  ]);

Â  Â  // 4. Combine all results into a single object
Â  Â  const aggregatedData = {
Â  Â  Â  Â  metadata: {
Â  Â  Â  Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  Â  Â  Â  totalUsers: users.length,
Â  Â  Â  Â  Â  Â  totalIssues: issuesWithDetails.length,
Â  Â  Â  Â  Â  Â  totalFlags: flags.length,
Â  Â  Â  Â  },
Â  Â  Â  Â  users: users,
Â  Â  Â  Â  issues: issuesWithDetails,
Â  Â  Â  Â  flags: flags,
Â  Â  };
    
    console.log(`--- AGGREGATION COMPLETE --- Total Issues: ${aggregatedData.metadata.totalIssues}`);
    
    return aggregatedData;
}


// --- AGGREGATION ENDPOINT (Called by the Sync button) ---
app.get('/api/sync', async (req, res) => {
Â  Â  try {
        const aggregatedData = await fetchAndAggregateData();
        // Log the data result to the backend console
        console.log("Full Aggregated Data (partial view):", aggregatedData.issues.slice(0, 2));

        // Return a summary to the client
Â  Â  Â  Â  res.json({ 
            success: true, 
            message: 'Data sync complete. Results logged to server console.',
            metadata: aggregatedData.metadata
        });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error during data aggregation:", error);
Â  Â  Â  Â  res.status(500).json({ success: false, error: "Server error during data aggregation." });
Â  Â  }
});


// --- ROOT ROUTE (Serves the HTML Page) ---
app.get('/', (req, res) => {
    res.send(`
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Data Aggregator Sync Panel</title>
            <style>
                body { font-family: sans-serif; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; margin: 0; background-color: #f4f4f9; }
                .container { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center; }
                h1 { color: #333; }
                #syncButton { 
                    padding: 10px 20px; 
                    font-size: 16px; 
                    background-color: #007bff; 
                    color: white; 
                    border: none; 
                    border-radius: 5px; 
                    cursor: pointer; 
                    transition: background-color 0.3s; 
                }
                #syncButton:hover:not(:disabled) { background-color: #0056b3; }
                #syncButton:disabled { background-color: #a0c3ff; cursor: not-allowed; }
                #statusMessage { margin-top: 20px; font-size: 1.1em; }
                .success { color: #28a745; }
                .error { color: #dc3545; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Janvaani Data Aggregator</h1>
                <p>Click the button to fetch and combine all data from the database collections.</p>
                <button id="syncButton">Sync All Data</button>
                <div id="statusMessage"></div>
            </div>

            <script>
                document.getElementById('syncButton').addEventListener('click', async () => {
                    const button = document.getElementById('syncButton');
                    const status = document.getElementById('statusMessage');

                    button.disabled = true;
                    status.innerHTML = 'Syncing... Please check the server console for progress.';
                    status.className = '';

                    try {
                        const response = await fetch('/api/sync');
                        const data = await response.json();

                        if (data.success) {
                            status.innerHTML = \`\${data.message}<br>Users: \${data.metadata.totalUsers}, Issues: \${data.metadata.totalIssues}\`;
                            status.className = 'success';
                        } else {
                            status.innerHTML = data.error || 'Sync failed due to an unknown error.';
                            status.className = 'error';
                        }
                    } catch (error) {
                        status.innerHTML = 'Network error: Could not connect to the aggregation server.';
                        status.className = 'error';
                        console.error('Frontend sync error:', error);
                    } finally {
                        button.disabled = false;
                    }
                });
            </script>
        </body>
        </html>
    `);
});


// --- START SERVER ---
app.listen(PORT, () => console.log(`ðŸš€ Data Aggregator running at http://localhost:${PORT}`));
